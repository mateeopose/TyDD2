// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2025 14:26:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2c
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2c_vlg_sample_tst(
	clock,
	fin_dato,
	fin_dir,
	reset,
	sda,
	soy,
	sampler_tx
);
input  clock;
input  fin_dato;
input  fin_dir;
input  reset;
input  sda;
input  soy;
output sampler_tx;

reg sample;
time current_time;
always @(clock or fin_dato or fin_dir or reset or sda or soy)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2c_vlg_check_tst (
	ackout,
	hab_dat,
	hab_dir,
	sampler_rx
);
input  ackout;
input  hab_dat;
input  hab_dir;
input sampler_rx;

reg  ackout_expected;
reg  hab_dat_expected;
reg  hab_dir_expected;

reg  ackout_prev;
reg  hab_dat_prev;
reg  hab_dir_prev;

reg  ackout_expected_prev;
reg  hab_dat_expected_prev;
reg  hab_dir_expected_prev;

reg  last_ackout_exp;
reg  last_hab_dat_exp;
reg  last_hab_dir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ackout_prev = ackout;
	hab_dat_prev = hab_dat;
	hab_dir_prev = hab_dir;
end

// update expected /o prevs

always @(trigger)
begin
	ackout_expected_prev = ackout_expected;
	hab_dat_expected_prev = hab_dat_expected;
	hab_dir_expected_prev = hab_dir_expected;
end



// expected hab_dat
initial
begin
	hab_dat_expected = 1'bX;
end 

// expected hab_dir
initial
begin
	hab_dir_expected = 1'bX;
end 

// expected ackout
initial
begin
	ackout_expected = 1'bX;
end 
// generate trigger
always @(ackout_expected or ackout or hab_dat_expected or hab_dat or hab_dir_expected or hab_dir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ackout = %b | expected hab_dat = %b | expected hab_dir = %b | ",ackout_expected_prev,hab_dat_expected_prev,hab_dir_expected_prev);
	$display("| real ackout = %b | real hab_dat = %b | real hab_dir = %b | ",ackout_prev,hab_dat_prev,hab_dir_prev);
`endif
	if (
		( ackout_expected_prev !== 1'bx ) && ( ackout_prev !== ackout_expected_prev )
		&& ((ackout_expected_prev !== last_ackout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ackout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ackout_expected_prev);
		$display ("     Real value = %b", ackout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ackout_exp = ackout_expected_prev;
	end
	if (
		( hab_dat_expected_prev !== 1'bx ) && ( hab_dat_prev !== hab_dat_expected_prev )
		&& ((hab_dat_expected_prev !== last_hab_dat_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hab_dat :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hab_dat_expected_prev);
		$display ("     Real value = %b", hab_dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hab_dat_exp = hab_dat_expected_prev;
	end
	if (
		( hab_dir_expected_prev !== 1'bx ) && ( hab_dir_prev !== hab_dir_expected_prev )
		&& ((hab_dir_expected_prev !== last_hab_dir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hab_dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hab_dir_expected_prev);
		$display ("     Real value = %b", hab_dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hab_dir_exp = hab_dir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2c_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg fin_dato;
reg fin_dir;
reg reset;
reg sda;
reg soy;
// wires                                               
wire ackout;
wire hab_dat;
wire hab_dir;

wire sampler;                             

// assign statements (if any)                          
i2c i1 (
// port map - connection between master ports and signals/registers   
	.ackout(ackout),
	.clock(clock),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.hab_dat(hab_dat),
	.hab_dir(hab_dir),
	.reset(reset),
	.sda(sda),
	.soy(soy)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// fin_dato
initial
begin
	fin_dato = 1'b0;
	fin_dato = #80000 1'b1;
	fin_dato = #20000 1'b0;
	fin_dato = #80000 1'b1;
	fin_dato = #80000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #60000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #40000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #40000 1'b0;
	fin_dato = #60000 1'b1;
	fin_dato = #60000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #40000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #40000 1'b0;
	fin_dato = #60000 1'b1;
	fin_dato = #20000 1'b0;
	fin_dato = #40000 1'b1;
	fin_dato = #20000 1'b0;
	fin_dato = #20000 1'b1;
	fin_dato = #40000 1'b0;
end 

// fin_dir
initial
begin
	fin_dir = 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #40000 1'b0;
	fin_dir = #120000 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #40000 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #40000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #120000 1'b0;
	fin_dir = #100000 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #40000 1'b0;
	fin_dir = #100000 1'b1;
	fin_dir = #100000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #20000 1'b0;
	fin_dir = #20000 1'b1;
	fin_dir = #20000 1'b0;
end 

// sda
initial
begin
	sda = 1'b1;
	sda = #20000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #60000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
	sda = #20000 1'b0;
	sda = #40000 1'b1;
	sda = #40000 1'b0;
	sda = #20000 1'b1;
	sda = #40000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
	sda = #40000 1'b0;
	sda = #20000 1'b1;
	sda = #40000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
	sda = #100000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #40000 1'b1;
	sda = #20000 1'b0;
	sda = #20000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// soy
initial
begin
	soy = 1'b0;
	soy = #20000 1'b1;
	soy = #40000 1'b0;
	soy = #40000 1'b1;
	soy = #40000 1'b0;
	soy = #80000 1'b1;
	soy = #100000 1'b0;
	soy = #20000 1'b1;
	soy = #40000 1'b0;
	soy = #60000 1'b1;
	soy = #40000 1'b0;
	soy = #20000 1'b1;
	soy = #60000 1'b0;
	soy = #20000 1'b1;
	soy = #20000 1'b0;
	soy = #80000 1'b1;
	soy = #60000 1'b0;
	soy = #40000 1'b1;
	soy = #20000 1'b0;
	soy = #100000 1'b1;
	soy = #20000 1'b0;
	soy = #20000 1'b1;
	soy = #40000 1'b0;
end 

i2c_vlg_sample_tst tb_sample (
	.clock(clock),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.reset(reset),
	.sda(sda),
	.soy(soy),
	.sampler_tx(sampler)
);

i2c_vlg_check_tst tb_out(
	.ackout(ackout),
	.hab_dat(hab_dat),
	.hab_dir(hab_dir),
	.sampler_rx(sampler)
);
endmodule

