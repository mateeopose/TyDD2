// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2025 19:04:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuitoi2c
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuitoi2c_vlg_sample_tst(
	clock,
	sda,
	sampler_tx
);
input  clock;
input  sda;
output sampler_tx;

reg sample;
time current_time;
always @(clock or sda)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuitoi2c_vlg_check_tst (
	ackout,
	finndato,
	finndir,
	habdat,
	habdir,
	sdaaa,
	soooy,
	sampler_rx
);
input  ackout;
input  finndato;
input  finndir;
input  habdat;
input  habdir;
input  sdaaa;
input  soooy;
input sampler_rx;

reg  ackout_expected;
reg  finndato_expected;
reg  finndir_expected;
reg  habdat_expected;
reg  habdir_expected;
reg  sdaaa_expected;
reg  soooy_expected;

reg  ackout_prev;
reg  finndato_prev;
reg  finndir_prev;
reg  habdat_prev;
reg  habdir_prev;
reg  sdaaa_prev;
reg  soooy_prev;

reg  ackout_expected_prev;
reg  finndato_expected_prev;
reg  finndir_expected_prev;
reg  habdat_expected_prev;
reg  habdir_expected_prev;
reg  sdaaa_expected_prev;
reg  soooy_expected_prev;

reg  last_ackout_exp;
reg  last_finndato_exp;
reg  last_finndir_exp;
reg  last_habdat_exp;
reg  last_habdir_exp;
reg  last_sdaaa_exp;
reg  last_soooy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	ackout_prev = ackout;
	finndato_prev = finndato;
	finndir_prev = finndir;
	habdat_prev = habdat;
	habdir_prev = habdir;
	sdaaa_prev = sdaaa;
	soooy_prev = soooy;
end

// update expected /o prevs

always @(trigger)
begin
	ackout_expected_prev = ackout_expected;
	finndato_expected_prev = finndato_expected;
	finndir_expected_prev = finndir_expected;
	habdat_expected_prev = habdat_expected;
	habdir_expected_prev = habdir_expected;
	sdaaa_expected_prev = sdaaa_expected;
	soooy_expected_prev = soooy_expected;
end



// expected ackout
initial
begin
	ackout_expected = 1'bX;
end 

// expected finndato
initial
begin
	finndato_expected = 1'bX;
end 

// expected finndir
initial
begin
	finndir_expected = 1'bX;
end 

// expected habdat
initial
begin
	habdat_expected = 1'bX;
end 

// expected habdir
initial
begin
	habdir_expected = 1'bX;
	habdir_expected = #300000 1'b0;
	habdir_expected = #20000 1'bX;
end 

// expected sdaaa
initial
begin
	sdaaa_expected = 1'bX;
end 

// expected soooy
initial
begin
	soooy_expected = 1'bX;
end 
// generate trigger
always @(ackout_expected or ackout or finndato_expected or finndato or finndir_expected or finndir or habdat_expected or habdat or habdir_expected or habdir or sdaaa_expected or sdaaa or soooy_expected or soooy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ackout = %b | expected finndato = %b | expected finndir = %b | expected habdat = %b | expected habdir = %b | expected sdaaa = %b | expected soooy = %b | ",ackout_expected_prev,finndato_expected_prev,finndir_expected_prev,habdat_expected_prev,habdir_expected_prev,sdaaa_expected_prev,soooy_expected_prev);
	$display("| real ackout = %b | real finndato = %b | real finndir = %b | real habdat = %b | real habdir = %b | real sdaaa = %b | real soooy = %b | ",ackout_prev,finndato_prev,finndir_prev,habdat_prev,habdir_prev,sdaaa_prev,soooy_prev);
`endif
	if (
		( ackout_expected_prev !== 1'bx ) && ( ackout_prev !== ackout_expected_prev )
		&& ((ackout_expected_prev !== last_ackout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ackout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ackout_expected_prev);
		$display ("     Real value = %b", ackout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ackout_exp = ackout_expected_prev;
	end
	if (
		( finndato_expected_prev !== 1'bx ) && ( finndato_prev !== finndato_expected_prev )
		&& ((finndato_expected_prev !== last_finndato_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finndato :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finndato_expected_prev);
		$display ("     Real value = %b", finndato_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_finndato_exp = finndato_expected_prev;
	end
	if (
		( finndir_expected_prev !== 1'bx ) && ( finndir_prev !== finndir_expected_prev )
		&& ((finndir_expected_prev !== last_finndir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finndir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finndir_expected_prev);
		$display ("     Real value = %b", finndir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finndir_exp = finndir_expected_prev;
	end
	if (
		( habdat_expected_prev !== 1'bx ) && ( habdat_prev !== habdat_expected_prev )
		&& ((habdat_expected_prev !== last_habdat_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habdat :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habdat_expected_prev);
		$display ("     Real value = %b", habdat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_habdat_exp = habdat_expected_prev;
	end
	if (
		( habdir_expected_prev !== 1'bx ) && ( habdir_prev !== habdir_expected_prev )
		&& ((habdir_expected_prev !== last_habdir_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habdir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habdir_expected_prev);
		$display ("     Real value = %b", habdir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_habdir_exp = habdir_expected_prev;
	end
	if (
		( sdaaa_expected_prev !== 1'bx ) && ( sdaaa_prev !== sdaaa_expected_prev )
		&& ((sdaaa_expected_prev !== last_sdaaa_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdaaa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdaaa_expected_prev);
		$display ("     Real value = %b", sdaaa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sdaaa_exp = sdaaa_expected_prev;
	end
	if (
		( soooy_expected_prev !== 1'bx ) && ( soooy_prev !== soooy_expected_prev )
		&& ((soooy_expected_prev !== last_soooy_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port soooy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", soooy_expected_prev);
		$display ("     Real value = %b", soooy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_soooy_exp = soooy_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module circuitoi2c_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg sda;
// wires                                               
wire ackout;
wire finndato;
wire finndir;
wire habdat;
wire habdir;
wire sdaaa;
wire soooy;

wire sampler;                             

// assign statements (if any)                          
circuitoi2c i1 (
// port map - connection between master ports and signals/registers   
	.ackout(ackout),
	.clock(clock),
	.finndato(finndato),
	.finndir(finndir),
	.habdat(habdat),
	.habdir(habdir),
	.sda(sda),
	.sdaaa(sdaaa),
	.soooy(soooy)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// sda
initial
begin
	sda = 1'b1;
	sda = #90000 1'b0;
	sda = #180000 1'b1;
	sda = #30000 1'b0;
	sda = #20000 1'b1;
	sda = #220000 1'b0;
	sda = #180000 1'b1;
	sda = #90000 1'b0;
	sda = #180000 1'b1;
end 

circuitoi2c_vlg_sample_tst tb_sample (
	.clock(clock),
	.sda(sda),
	.sampler_tx(sampler)
);

circuitoi2c_vlg_check_tst tb_out(
	.ackout(ackout),
	.finndato(finndato),
	.finndir(finndir),
	.habdat(habdat),
	.habdir(habdir),
	.sdaaa(sdaaa),
	.soooy(soooy),
	.sampler_rx(sampler)
);
endmodule

